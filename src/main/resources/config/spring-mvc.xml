<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        			http://www.springframework.org/schema/beans/spring-beans.xsd
                    http://www.springframework.org/schema/context
                    http://www.springframework.org/schema/context/spring-context.xsd
                    http://www.springframework.org/schema/mvc  
                    http://www.springframework.org/schema/mvc/spring-mvc.xsd 
                    http://www.springframework.org/schema/tx  
                    http://www.springframework.org/schema/tx/spring-tx.xsd 
                    http://www.springframework.org/schema/aop 
                    http://www.springframework.org/schema/aop/spring-aop.xsd 
                    http://www.springframework.org/schema/data/jpa/
                    http://www.springframework.org/schema/data/jpa/spring-jpa.xsd" >
 <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>
	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter" />
    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
    <bean id="messageConverters" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter" /> <!--                 JSON转换器 -->
                <ref bean="stringHttpMessageConverter" />             
            </list>
        </property>
    </bean>
<!--     <mvc:default-servlet-handler default-servlet-name="所使用的Web服务器默认使用的Servlet名称" /> -->
<!--     <mvc:default-servlet-handler/> -->
    <mvc:annotation-driven />
    <!--annotation configuration，隐式的向容器注册bean，以识别注解 -->
    <context:annotation-config/>
    <!--     扫描指定包下的全部的标有@Component的类(包含子注解@Service,@Reposity等 )，并注册成bean 
    use-default-filters="false"不自动扫描所有，此时include-filter才有效果-->
<!--    <context:component-scan base-package="system.**" /> -->
    <context:component-scan base-package="system,common" use-default-filters="false" >
<!--     包含 -->
    	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
<!--     	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
<!--     	排除 -->
<!--     	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/> -->
    </context:component-scan>

  
    
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
    	<property name="contentNegotiationManager" ref="cnManager" />
    	<property name="defaultViews">
            <list>
            <bean class="org.springframework.web.servlet.view.xml.MappingJackson2XmlView">
                	<property name="modelKey" value="xmlAble"/>
                </bean>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
                	<property name="contentType" value="application/json;charset=UTF-8"/>
                </bean>
                    
            </list>
        </property>
    	<property name="viewResolvers">
    		<list>
    			<ref bean="viewResolverCommon"/>
    			<ref bean="JspViewResolver"/>
    		</list>
    	</property>
    
    </bean>
    <bean id="cnManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="ignoreAcceptHeader" value="true" />
		<property name="defaultContentType" value="text/html" />
		<property name="mediaTypes">
			<map>
<!-- 				<entry key="html" value="text/html" /> -->
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
	</bean>
    
    <bean id="viewResolverCommon" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
<!--			可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑-->
		<property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView"/>
		<property name="order" value="2" />
	</bean>
    
    <!-- viewResolver, 视图解析器，解析jsp默认使用jstl标签，classpath得有jstl的包-->
    <bean id="JspViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
<!--         <property name="viewName" value="filt"/> -->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
        <property name="order" value="1"/>
    </bean>
    
    <!-- localeResolver,区域解析器，用于支持国际化 -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"/>

    <!-- multipartResolver，文件上传需要的多部分解析器 -->
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.support.StandardServletMultipartResolver">
    </bean>
    
<!--    异常处理器 -->
<!--     <bean id="myExceptionHandler" class="my.utils.ExceptHandler"> -->
<!--     	<property name="jsonMessageConverter"  ref="mappingJacksonHttpMessageConverter" />  -->
<!--   	</bean> -->

<!-- 利用切面记录日志 -->
	<bean id="logInterceptor" class="utils.LogInterceptor" /> 
<!-- <aop:aspectj-autoproxy expose-proxy="true" />   -->
<!-- 	<aop:config>   -->
<!-- 	    <aop:aspect id="logAspect" ref="logInterceptor">   -->
<!-- 		    <aop:pointcut id="logPointCut" expression="execution (* system.service..*Service.*(..))" />   -->
<!-- 		    <aop:before method="before" pointcut-ref="logPointCut"/>   -->
<!-- 		    <aop:after method="after" pointcut-ref="logPointCut"/> -->
<!-- 		    <aop:after-throwing method="afterThrowing" throwing="e"  pointcut-ref="logPointCut"/> -->
<!-- 	   		<aop:around method="around" pointcut-ref="logPointCut"/> -->
<!-- 	    </aop:aspect>   -->
<!-- 	</aop:config>  -->
<!-- <bean class="config.SpringDataJpaConfig" />  -->
<!--static resource，指定Spring MVC那些静态资源需单独处理，不通过dispatcher servlet -->
<!--     <mvc:resources mapping="/static/**" location="/static/"/> -->
<beans profile="dev">
    <mvc:resources mapping="/static/**" location="/WEB-INF/static/" >
	    <mvc:resource-chain resource-cache="true">
	    	<mvc:resolvers >
	    		<bean class="org.springframework.web.servlet.resource.GzipResourceResolver"/>  
	    	</mvc:resolvers>
	    </mvc:resource-chain>  
    </mvc:resources>
</beans>
</beans>