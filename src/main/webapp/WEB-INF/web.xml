<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
    id="WebApp_ID" version="3.0">
  
    <!--定义应用名称-->
    <display-name>myapp</display-name>

    <!-- web.xml的加载过程是context-param >> listener  >> fileter  >> servlet -->
    <!-- 配置Spring MVC加载的应用上下文配置文件，设定web应用的context环境参数，WEB项目所有部分都将共享这个上下文 -->
    <!-- param-name在JSP网页中使用${initParam.param_name}获得，在Servlet则使用String param_name=getServletContext().getInitParamter("param_name"); -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!-- 该xml文件定义了根应用上下文，会被ContextLoaderListener加载 -->
<!--         <param-value>/WEB-INF/spring/root-context.xml</param-value> -->
        <param-value>classpath:config/spring-context.xml</param-value>
    </context-param>
<!-- 	为上下文设置默认的profile -->
<!-- 	<context-param> -->
<!-- 		<param-name>spring.profiles.active</param-name> -->
<!-- 		<param-value>test</param-value> -->
<!-- 	</context-param> -->
	<context-param>
		<param-name>spring.profiles.default</param-name>
		<param-value>dev</param-value>
	</context-param>

		<!-- logback监听配置,context-param必须独立配置 -->
	<context-param>
    	<param-name>logbackConfigLocation</param-name>
    	<param-value>classpath:config/logback.xml</param-value>
	</context-param>
	<listener>
    	<listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>
	</listener>

    
    <!-- 注册ContextLoaderListener --> 
    <listener>        <!--用来设定Listener接口-->  
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class><!--定义Listener的类名称-->  
    </listener>  
    <!-- 防止Spring内存溢出监听器  -->  
    <listener>  
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>  
    </listener> 
    
    <!--Encoding filter -->
    <filter>      <!-- 用来声明filter的相关设定,过滤器可以截取和修改一个Servlet或JSP页面的请求或从一个Servlet或JSP页面发出的响应-->  
        <filter-name>encodingFilter</filter-name>     <!--指定filter的名字-->  
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class> <!--定义filter的类的名称-->  
        <async-supported>true</async-supported>     <!--设置是否启用异步支持-->  
        <init-param><!--用来定义参数,若在Servlet可以使用下列方法来获得:String param_name=getServletContext().getInitParamter("param-name里面的值");-->  
            <param-name>encoding</param-name>   <!--参数名称-->  
            <param-value>UTF-8</param-value> <!--参数值-->  
        </init-param>  
    </filter>  
    <filter-mapping><!--用来定义filter所对应的URL-->  
        <filter-name>encodingFilter</filter-name>     <!--指定对应filter的名字-->  
        <url-pattern>/*</url-pattern>       <!--指定filter所对应的URL-->  
    </filter-mapping>



	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>*</url-pattern>
	</filter-mapping>
    <!-- springSecurityFilterChain filter-->
<!--     <filter> -->
<!--         在Spring Security配置在web安全性中时，DelegatingFilterProxy会将过滤处理逻辑委托给这个filter  -->
<!--         <filter-name>springSecurityFilterChain</filter-name> -->
<!--         <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> -->
<!--     </filter> -->
<!--     <filter-mapping> -->
<!--         <filter-name>springSecurityFilterChain</filter-name> -->
<!--         <url-pattern>/*</url-pattern> -->
<!--     </filter-mapping> -->


    <!-- 注册DispatcherServlet -->
    <servlet>
        <!-- 配置DispatcherServlet类型的servlet,自动启动并mapping到所有请求，Spring MVC的入口 -->
        <servlet-name>SpringMVC</servlet-name>
        <!-- DispatcherServlet即前端控制器，会根据servlet名字找到/WEB-INF/SpringMVC-context.xml文件并加载其应用上下文，接受request进行response -->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param><!--用来定义参数,可有多个init-param。在servlet类中通过getInitParamenter(String name)方法访问初始化参数    -->  
            <param-name>spring.profiles.default</param-name>
            <param-value>dev</param-value>
        </init-param>
        <init-param>
            <param-name>contextConfigLocation</param-name>  <!--参数名称-->  
            <param-value>classpath:config/spring-mvc.xml</param-value> <!--参数值-->  
        </init-param>
        <!-- <load-on-startup>标记容器在启动时就装载这个servlet并调用其init方法，若不存在则在该servlet第一个请求时加载 -->
        <load-on-startup>1</load-on-startup>
        <!-- 给servlet声明赋值，使其变成multipartConfig servlet，文件上传配置之一 -->
        <multipart-config>         
            <!-- 设置上传文件容量最大字节，这里限制为50MB -->
            <max-file-size>52428800</max-file-size>
        </multipart-config>
    </servlet>
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <!-- url模式设置为“／”表明包括静态资源的所有请求都被映射到dispatcher servlet -->
        <url-pattern>/</url-pattern>
        <url-pattern>*.do</url-pattern>
        <url-pattern>*.action</url-pattern>
    </servlet-mapping>  

    <session-config>
        <!-- 会话超时配置，此处120分钟后session.getAttribute()获取的值为空 -->
        <session-timeout>120</session-timeout>
    </session-config>
    
    <mime-mapping><!--设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开-->  
        <extension>*.ppt</extension>            <!--扩展名名称-->  
        <mime-type>application/mspowerpoint</mime-type>         <!--MIME格式-->  
    </mime-mapping>
    
    
    <error-page>  <!--  将错误代码(Error Code)或异常(Exception)的种类对应到web应用资源路径   -->
        <error-code>404</error-code>      <!--    HTTP Error code,例如: 404、403  -->
        <location>/error/404.html</location> <!-- 用来设置发生错误或异常时要显示的页面  -->
    </error-page>  
    <error-page>  
        <exception-type>java.lang.Exception</exception-type><!-- 设置可能会发生的java异常类型,例如:java.lang.Exception -->  
        <location>/ExceptionError.html</location>            <!-- 用来设置发生错误或异常时要显示的页面 -->  
    </error-page> 

    <welcome-file-list>
        <welcome-file>/views/index.jsp</welcome-file>
    </welcome-file-list>    
    
    <servlet>
      <servlet-name>DruidStatView</servlet-name>
      <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
  
  
  	<init-param>
  	<!-- 用户名 --> 
		<param-name>loginUsername</param-name>  
		<param-value>lchhey</param-value>  
    </init-param>  
    <init-param>  
		<!-- 密码 -->  
		<param-name>loginPassword</param-name>  
		<param-value>admin</param-value>  
  	</init-param>
  </servlet>
	<servlet-mapping>
      <servlet-name>DruidStatView</servlet-name>
      <url-pattern>/druid/*</url-pattern>
  </servlet-mapping>

</web-app>